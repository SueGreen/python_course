func call 1 executed in 0.000113 sec
Name: 	func
Type: 	<class 'function'>
Sign: 	()
Args: 	positional ()
      	key-worded {}

Doc: 	None

Source: @task4.decorator_4
	def func():
	    print("I am ready to Start")
	    result = 0
	    n =  random.randint(10,751)
	    for i in range(n):
	        result += (i**2)

Output:
	I am ready to Start
funx call 1 executed in 0.000157 sec
Name: 	funx
Type: 	<class 'function'>
Sign: 	(n=2, m=5)
Args: 	positional (2, 3)
      	key-worded {}

Doc: 	DoCstring

Source: @task4.decorator_4
	def funx(n=2, m=5):
	    '''DoCstring'''
	    print('I am ready to \ndo serious stuff')
	    max_val = float('-inf')
	    n =  random.randint(10,751)
	    res = [pow(i,2) for i in range(n)]
	    for i in res:
	        if i > max_val: 
	            max_val = i

Output:
	I am ready to 
	do serious stuff
func call 2 executed in 0.000191 sec
Name: 	func
Type: 	<class 'function'>
Sign: 	()
Args: 	positional ()
      	key-worded {}

Doc: 	None

Source: @task4.decorator_4
	def func():
	    print("I am ready to Start")
	    result = 0
	    n =  random.randint(10,751)
	    for i in range(n):
	        result += (i**2)

Output:
	I am ready to Start
func call 3 executed in 0.000166 sec
Name: 	func
Type: 	<class 'function'>
Sign: 	()
Args: 	positional ()
      	key-worded {}

Doc: 	None

Source: @task4.decorator_4
	def func():
	    print("I am ready to Start")
	    result = 0
	    n =  random.randint(10,751)
	    for i in range(n):
	        result += (i**2)

Output:
	I am ready to Start
funx call 2 executed in 0.000084 sec
Name: 	funx
Type: 	<class 'function'>
Sign: 	(n=2, m=5)
Args: 	positional ()
      	key-worded {}

Doc: 	DoCstring

Source: @task4.decorator_4
	def funx(n=2, m=5):
	    '''DoCstring'''
	    print('I am ready to \ndo serious stuff')
	    max_val = float('-inf')
	    n =  random.randint(10,751)
	    res = [pow(i,2) for i in range(n)]
	    for i in res:
	        if i > max_val: 
	            max_val = i

Output:
	I am ready to 
	do serious stuff
func call 4 executed in 0.000182 sec
Name: 	func
Type: 	<class 'function'>
Sign: 	()
Args: 	positional ()
      	key-worded {}

Doc: 	None

Source: @task4.decorator_4
	def func():
	    print("I am ready to Start")
	    result = 0
	    n =  random.randint(10,751)
	    for i in range(n):
	        result += (i**2)

Output:
	I am ready to Start
quadratic_solver call 1 executed in 0.000017 sec
Name: 	quadratic_solver
Type: 	<class 'function'>
Sign: 	(a=1, b=4, c=2)
Args: 	positional (1, 4, 2)
      	key-worded {}

Doc: 	None

Source: @task4.decorator_4
	def quadratic_solver(a=1,b=4, c=2): 
	    discriminant = (b**2) - (4 * a * c)
	    ans1 = (-b - cmath.sqrt(discriminant)) / (2 * a)
	    ans2 = (-b + cmath.sqrt(discriminant)) / (2 * a)
	    print(f'roots are: {ans1}, {ans2}')

Output:
	roots are: (-3.414213562373095+0j), (-0.5857864376269049+0j)
pascal_triangle call 1 executed in 0.000017 sec
Name: 	pascal_triangle
Type: 	<class 'function'>
Sign: 	(n)
Args: 	positional (5,)
      	key-worded {}

Doc: 	None

Source: @task4.decorator_4
	def pascal_triangle(n):
	    cur = [1]
	    for row_num in range(n):
	        new = [1]
	        for elem_num in range(len(cur)-1):
	            new.append(cur[elem_num] + cur[elem_num + 1])
	        new = new + [1]
	        print(*new)
	        cur = new

Output:
	1 1
	1 2 1
	1 3 3 1
	1 4 6 4 1
	1 5 10 10 5 1
